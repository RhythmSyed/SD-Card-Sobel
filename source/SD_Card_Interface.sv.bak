// $Id: $
// File name:   SD_Card_Interface.sv
// Created:     4/10/2018
// Author:      Matthew Hill
// Lab Section: 337-02
// Version:     1.0  Initial Design Entry
// Description: SD_card interfacing for final project.

module SD_Card_Interface
(
	input clk,
	input n_rst,
	input read, // tells SD_Card_Interface to read from SD Card
	input write, // tells SD_Card_Interface to write to SD Card
	input change_size, //tells SD_Card_Interface to change block size
	input [7:0] block_size, //gives block size for change_size
	input cmd0, //tells SD card to send command 0
	input cmd1, //etc
	input cmd2,
	input cmd3,
	input cmd7,
	input cmd8,
	input acmd41,
	input getData, //tells SD card that its receiving data from the fifo
	input [7:0] fifo_data,
	input [31:0] address,
	inout CMD,
	inout [3:0] Data,
	output [23:0] Image_data, //3 pixel buffer
	output [63:0] Header_data, //height and width from header
	output sd_error, 
	output detect,
	output enable, //tells image_receiver that pixel data is ready
	output hold //deassert when command is finished sending
);

	reg [5:0] cmd_index;
	reg cmd0_detect;
	reg cmd1_detect;
	reg cmd2_detect;
	reg cmd3_detect;
	reg cmd7_detect;
	reg cmd8_detect;
	reg read_detect;
	reg write_detect;
	reg change_size_detect;
	reg [5:0] curr_cmd_index;
	reg [5:0] prev_cmd_index;
	reg [31:0] cmd_argument;
	reg [31:0] curr_cmd_argument;
	reg [31:0] prev_cmd_argument;
	//cmd detector
	pos_edge_detector cmd0_d(.cmd(cmd0), .clk(clk), .cmd_detect(cmd0_detect));
	pos_edge_detector cmd1_d(.cmd(cmd0), .clk(clk), .cmd_detect(cmd1_detect));
	pos_edge_detector cmd2_d(.cmd(cmd0), .clk(clk), .cmd_detect(cmd2_detect));
	pos_edge_detector cmd3_d(.cmd(cmd0), .clk(clk), .cmd_detect(cmd3_detect));
	pos_edge_detector cmd7_d(.cmd(cmd0), .clk(clk), .cmd_detect(cmd7_detect));
	pos_edge_detector cmd8_d(.cmd(cmd0), .clk(clk), .cmd_detect(cmd8_detect));
	pos_edge_detector read_d(.cmd(cmd0), .clk(clk), .cmd_detect(read_detect));
	pos_edge_detector write_d(.cmd(cmd0), .clk(clk), .cmd_detect(write_detect));
	pos_edge_detector acmd41_d(.cmd(acmd41), .clk(clk), .cmd_detect(acmd41_detect));
	pos_edge_detector change_size_d(.cmd(acmd41), .clk(clk), .cmd_detect(change_size_detect));
	
	
	//use as load enable for command shift register
	assign gen_cmd_detect = cmd0_detect || cmd1_detect || cmd2_detect || cmd3_detect || cmd7_detect || cmd8_detect || read_detect || write_detect || acmd41_detect || change_size_detect;
	
	//sets cmd_index
	always_comb begin //cmd_index outputs correct index for the cycle that its command is detected
		if (read_detect == 1) begin
			cmd_index = 6'd17;
		end
		else if (write_detect == 1) begin
			cmd_index = 6'd24;
		end
		else if (cmd0_detect == 1) begin
			cmd_index = 6'd0;
		end
		else if (cmd1_detect == 1) begin
			cmd_index = 6'd1;
		end
		else if (cmd2_detect == 1) begin
			cmd_index = 6'd2;
		end
		else if (cmd3_detect == 1) begin
			cmd_index = 6'd3;
		end
		else if (cmd7_detect == 1) begin
			cmd_index = 6'd7;
		end
		else if (cmd8_detect == 1) begin
			cmd_index = 6'd8;
		end
		else if (acmd41_detect == 1) begin
			cmd_index = 6'd41;
		end
		else if (change_size_detect == 1) begin
			cmd_index = 6'd16;
		end
		else begin // to avoid latch have to set default value
			cmd_index = 6'd0;
		end
	end
	
	//storing cmd_index stable into a register if a new cmd is detected
	always_ff @(posedge clk, negedge n_rst) begin
		if(n_rst == 0) begin
			curr_cmd_index = 0;
			prev_cmd_index = 0;
		end else begin
			prev_cmd_index <= curr_cmd_index;
			if (gen_cmd_detect == 1) begin
				curr_cmd_index <= cmd_index;
			end else begin
				curr_cmd_index <= prev_cmd_index;
			end
		end
	end

	//combinational logic for generating cmd argument
	always_comb begin
		if(curr_cmd_index = 0) begin
			argument = 32'd0
		end
	end
endmodule


	
